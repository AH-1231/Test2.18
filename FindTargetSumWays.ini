from graphviz import Digraph

class DFSTreeVisualizer:
    def __init__(self):
        self.graph = Digraph(format="png")
        self.node_id = 0  # 递归调用时每个节点的唯一标识符
    
    def dfs(self, i, cur_sum, nums, target, parent_id=None):
        # 创建当前节点
        node_label = f"dfs({i}, {cur_sum})"
        node_id = self.node_id
        self.graph.node(str(node_id), node_label)
        self.node_id += 1

        # 连接到父节点
        if parent_id is not None:
            self.graph.edge(str(parent_id), str(node_id))

        # 递归终止条件
        if i == len(nums):
            return

        # 递归调用，分别选择 +nums[i] 和 -nums[i]
        self.dfs(i + 1, cur_sum + nums[i], nums, target, node_id)
        self.dfs(i + 1, cur_sum - nums[i], nums, target, node_id)

    def visualize(self, nums, target):
        self.dfs(0, 0, nums, target)
        self.graph.render("dfs_tree", view=True)  # 生成并打开图片

# **运行示例**
nums = [1, 1, 1]
target = 2
visualizer = DFSTreeVisualizer()
visualizer.visualize(nums, target)